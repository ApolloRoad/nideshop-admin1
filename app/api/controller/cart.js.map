{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\api\\controller\\cart.js"
    ],
    "names": [
        "Base",
        "require",
        "module",
        "exports",
        "getCart",
        "cartList",
        "model",
        "where",
        "user_id",
        "think",
        "userId",
        "session_id",
        "select",
        "goodsCount",
        "goodsAmount",
        "checkedGoodsCount",
        "checkedGoodsAmount",
        "cartItem",
        "number",
        "retail_price",
        "isEmpty",
        "checked",
        "list_pic_url",
        "id",
        "goods_id",
        "getField",
        "cartTotal",
        "indexAction",
        "success",
        "addAction",
        "goodsId",
        "post",
        "productId",
        "goodsInfo",
        "find",
        "is_delete",
        "fail",
        "productInfo",
        "goods_number",
        "cartInfo",
        "product_id",
        "goodsSepcifitionValue",
        "goods_specification_ids",
        "split",
        "cartData",
        "goods_sn",
        "goods_name",
        "name",
        "market_price",
        "goods_specifition_name_value",
        "join",
        "goods_specifition_ids",
        "thenAdd",
        "increment",
        "updateAction",
        "parseInt",
        "update",
        "newCartInfo",
        "goodsSepcifition",
        "field",
        "JSON",
        "stringify",
        "newNumber",
        "delete",
        "checkedAction",
        "toString",
        "isChecked",
        "deleteAction",
        "isString",
        "goodscountAction",
        "checkoutAction",
        "addressId",
        "get",
        "checkedAddress",
        "is_default",
        "province_name",
        "getRegionName",
        "province_id",
        "city_name",
        "city_id",
        "district_name",
        "district_id",
        "full_region",
        "freightPrice",
        "checkedGoodsList",
        "filter",
        "v",
        "couponList",
        "couponPrice",
        "goodsTotalPrice",
        "orderTotalPrice",
        "actualPrice",
        "checkedCoupon"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\api\\controller\\cart.js",
    "sourcesContent": [
        "const Base = require('./base.js');\n\nmodule.exports = class extends Base {\n  /**\n   * 获取购物车中的数据\n   * @returns {Promise.<{cartList: *, cartTotal: {goodsCount: number, goodsAmount: number, checkedGoodsCount: number, checkedGoodsAmount: number}}>}\n   */\n  async getCart() {\n    const cartList = await this.model('cart').where({user_id: think.userId, session_id: 1}).select();\n    // 获取购物车统计信息\n    let goodsCount = 0;\n    let goodsAmount = 0.00;\n    let checkedGoodsCount = 0;\n    let checkedGoodsAmount = 0.00;\n    for (const cartItem of cartList) {\n      goodsCount += cartItem.number;\n      goodsAmount += cartItem.number * cartItem.retail_price;\n      if (!think.isEmpty(cartItem.checked)) {\n        checkedGoodsCount += cartItem.number;\n        checkedGoodsAmount += cartItem.number * cartItem.retail_price;\n      }\n\n      // 查找商品的图片\n      cartItem.list_pic_url = await this.model('goods').where({id: cartItem.goods_id}).getField('list_pic_url', true);\n    }\n\n    return {\n      cartList: cartList,\n      cartTotal: {\n        goodsCount: goodsCount,\n        goodsAmount: goodsAmount,\n        checkedGoodsCount: checkedGoodsCount,\n        checkedGoodsAmount: checkedGoodsAmount\n      }\n    };\n  }\n\n  /**\n   * 获取购物车信息，所有对购物车的增删改操作，都要重新返回购物车的信息\n   * @return {Promise} []\n   */\n  async indexAction() {\n    return this.success(await this.getCart());\n  }\n\n  /**\n   * 添加商品到购物车\n   * @returns {Promise.<*>}\n   */\n  async addAction() {\n    const goodsId = this.post('goodsId');\n    const productId = this.post('productId');\n    const number = this.post('number');\n\n    // 判断商品是否可以购买\n    const goodsInfo = await this.model('goods').where({id: goodsId}).find();\n    if (think.isEmpty(goodsInfo) || goodsInfo.is_delete === 1) {\n      return this.fail(400, '商品已下架');\n    }\n\n    // 取得规格的信息,判断规格库存\n    const productInfo = await this.model('product').where({goods_id: goodsId, id: productId}).find();\n    if (think.isEmpty(productInfo) || productInfo.goods_number < number) {\n      return this.fail(400, '库存不足');\n    }\n\n    // 判断购物车中是否存在此规格商品\n    const cartInfo = await this.model('cart').where({goods_id: goodsId, product_id: productId}).find();\n    if (think.isEmpty(cartInfo)) {\n      // 添加操作\n\n      // 添加规格名和值\n      let goodsSepcifitionValue = [];\n      if (!think.isEmpty(productInfo.goods_specification_ids)) {\n        goodsSepcifitionValue = await this.model('goods_specification').where({\n          goods_id: goodsId,\n          id: {'in': productInfo.goods_specification_ids.split('_')}\n        }).getField('value');\n      }\n\n      // 添加到购物车\n      const cartData = {\n        goods_id: goodsId,\n        product_id: productId,\n        goods_sn: productInfo.goods_sn,\n        goods_name: goodsInfo.name,\n        list_pic_url: goodsInfo.list_pic_url,\n        number: number,\n        session_id: 1,\n        user_id: think.userId,\n        retail_price: productInfo.retail_price,\n        market_price: productInfo.retail_price,\n        goods_specifition_name_value: goodsSepcifitionValue.join(';'),\n        goods_specifition_ids: productInfo.goods_specification_ids,\n        checked: 1\n      };\n\n      await this.model('cart').thenAdd(cartData, {product_id: productId});\n    } else {\n      // 如果已经存在购物车中，则数量增加\n      if (productInfo.goods_number < (number + cartInfo.number)) {\n        return this.fail(400, '库存不足');\n      }\n\n      await this.model('cart').where({\n        goods_id: goodsId,\n        product_id: productId,\n        id: cartInfo.id\n      }).increment('number', number);\n    }\n    return this.success(await this.getCart());\n  }\n\n  // 更新指定的购物车信息\n  async updateAction() {\n    const goodsId = this.post('goodsId');\n    const productId = this.post('productId'); // 新的product_id\n    const id = this.post('id'); // cart.id\n    const number = parseInt(this.post('number')); // 不是\n\n    // 取得规格的信息,判断规格库存\n    const productInfo = await this.model('product').where({goods_id: goodsId, id: productId}).find();\n    if (think.isEmpty(productInfo) || productInfo.goods_number < number) {\n      return this.fail(400, '库存不足');\n    }\n\n    // 判断是否已经存在product_id购物车商品\n    const cartInfo = await this.model('cart').where({id: id}).find();\n    // 只是更新number\n    if (cartInfo.product_id === productId) {\n      await this.model('cart').where({id: id}).update({\n        number: number\n      });\n\n      return this.success(await this.getCart());\n    }\n\n    const newCartInfo = await this.model('cart').where({goods_id: goodsId, product_id: productId}).find();\n    if (think.isEmpty(newCartInfo)) {\n      // 直接更新原来的cartInfo\n\n      // 添加规格名和值\n      let goodsSepcifition = [];\n      if (!think.isEmpty(productInfo.goods_specification_ids)) {\n        goodsSepcifition = await this.model('goods_specification').field(['nideshop_goods_specification.*', 'nideshop_specification.name']).join('nideshop_specification ON nideshop_specification.id=nideshop_goods_specification.specification_id').where({\n          'nideshop_goods_specification.goods_id': goodsId,\n          'nideshop_goods_specification.id': {'in': productInfo.goods_specification_ids.split('_')}\n        }).select();\n      }\n\n      const cartData = {\n        number: number,\n        goods_specifition_name_value: JSON.stringify(goodsSepcifition),\n        goods_specifition_ids: productInfo.goods_specification_ids,\n        retail_price: productInfo.retail_price,\n        market_price: productInfo.retail_price,\n        product_id: productId,\n        goods_sn: productInfo.goods_sn\n      };\n\n      await this.model('cart').where({id: id}).update(cartData);\n    } else {\n      // 合并购物车已有的product信息，删除已有的数据\n      const newNumber = number + newCartInfo.number;\n\n      if (think.isEmpty(productInfo) || productInfo.goods_number < newNumber) {\n        return this.fail(400, '库存不足');\n      }\n\n      await this.model('cart').where({id: newCartInfo.id}).delete();\n\n      const cartData = {\n        number: newNumber,\n        goods_specifition_name_value: newCartInfo.goods_specifition_name_value,\n        goods_specifition_ids: newCartInfo.goods_specification_ids,\n        retail_price: productInfo.retail_price,\n        market_price: productInfo.retail_price,\n        product_id: productId,\n        goods_sn: productInfo.goods_sn\n      };\n\n      await this.model('cart').where({id: id}).update(cartData);\n    }\n\n    return this.success(await this.getCart());\n  }\n\n  // 是否选择商品，如果已经选择，则取消选择，批量操作\n  async checkedAction() {\n    let productId = this.post('productIds').toString();\n    const isChecked = this.post('isChecked');\n\n    if (think.isEmpty(productId)) {\n      return this.fail('删除出错');\n    }\n\n    productId = productId.split(',');\n    await this.model('cart').where({product_id: {'in': productId}}).update({checked: parseInt(isChecked)});\n\n    return this.success(await this.getCart());\n  }\n\n  // 删除选中的购物车商品，批量删除\n  async deleteAction() {\n    let productId = this.post('productIds');\n    if (!think.isString(productId)) { \n      return this.fail('删除出错');\n    }\n\n    productId = productId.split(',');\n\n    await this.model('cart').where({product_id: {'in': productId}}).delete();\n\n    return this.success(await this.getCart());\n  }\n\n  // 获取购物车商品的总件件数\n  async goodscountAction() {\n    const cartData = await this.getCart();\n    return this.success({\n      cartTotal: {\n        goodsCount: cartData.cartTotal.goodsCount\n      }\n    });\n  }\n\n  /**\n   * 订单提交前的检验和填写相关订单信息\n   * @returns {Promise.<void>}\n   */\n  async checkoutAction() {\n    const addressId = this.get('addressId'); // 收货地址id\n    // const couponId = this.get('couponId'); // 使用的优惠券id\n\n    // 选择的收货地址\n    let checkedAddress = null;\n    if (addressId) {\n      checkedAddress = await this.model('address').where({is_default: 1, user_id: think.userId}).find();\n    } else {\n      checkedAddress = await this.model('address').where({id: addressId, user_id: think.userId}).find();\n    }\n\n    if (!think.isEmpty(checkedAddress)) {\n      checkedAddress.province_name = await this.model('region').getRegionName(checkedAddress.province_id);\n      checkedAddress.city_name = await this.model('region').getRegionName(checkedAddress.city_id);\n      checkedAddress.district_name = await this.model('region').getRegionName(checkedAddress.district_id);\n      checkedAddress.full_region = checkedAddress.province_name + checkedAddress.city_name + checkedAddress.district_name;\n    }\n\n    // 根据收货地址计算运费\n    const freightPrice = 0.00;\n\n    // 获取要购买的商品\n    const cartData = await this.getCart();\n    const checkedGoodsList = cartData.cartList.filter(function(v) {\n      return v.checked === 1;\n    });\n\n    // 获取可用的优惠券信息，功能还示实现\n    const couponList = await this.model('user_coupon').select();\n    const couponPrice = 0.00; // 使用优惠券减免的金额\n\n    // 计算订单的费用\n    const goodsTotalPrice = cartData.cartTotal.checkedGoodsAmount; // 商品总价\n    const orderTotalPrice = cartData.cartTotal.checkedGoodsAmount + freightPrice - couponPrice; // 订单的总价\n    const actualPrice = orderTotalPrice - 0.00; // 减去其它支付的金额后，要实际支付的金额\n\n    return this.success({\n      checkedAddress: checkedAddress,\n      freightPrice: freightPrice,\n      checkedCoupon: {},\n      couponList: couponList,\n      couponPrice: couponPrice,\n      checkedGoodsList: checkedGoodsList,\n      goodsTotalPrice: goodsTotalPrice,\n      orderTotalPrice: orderTotalPrice,\n      actualPrice: actualPrice\n    });\n  }\n};\n"
    ]
}